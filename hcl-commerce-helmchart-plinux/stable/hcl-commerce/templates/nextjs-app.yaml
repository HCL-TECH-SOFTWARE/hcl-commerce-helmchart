{{- if and (.Values.nextjsApp.enabled) (or (eq $.Values.common.searchEngine "elastic") (and ($.Values.orchestrationApp.enabled) (eq $.Values.common.searchEngine "solr"))) -}}
{{- $envTypeList := splitList "," (nospace .Values.common.environmentType) -}}
{{- range $envType := $envTypeList -}}
{{- if ne $envType "share" -}}
{{- $_ := set $ "envType" $envType }}
######################################################
# Licensed Materials - Property of HCL Technologies
#  HCL Commerce
#  (C) Copyright HCL Technologies Limited 2023
######################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: HCL-Commerce
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "-" }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
    app.kubernetes.io/name: {{ include "name" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.nextjsApp.name}}
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      chart: {{ $.Chart.Name }}
      release: {{ $.Release.Name }}
      heritage: {{ $.Release.Service }}
      component: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.nextjsApp.name}}
      group: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}
  replicas: {{ $.Values.nextjsApp.replica }}
  template:
    metadata:
      annotations:
        productName: "HCL Commerce"
        productVersion: {{ $.Values.common.productVersion | quote }}
        {{- if and ($.Values.metrics.enabled) ($.Values.metrics.prometheusAnnotations.enabled) }}
        prometheus.io/scrape: "true"
        prometheus.io/path: /api/metrics
        prometheus.io/port: "3343"
        {{- end }}
      labels:
        app: HCL-Commerce
        chart: {{ $.Chart.Name }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
        component: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.nextjsApp.name}}
        group: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}
        app.kubernetes.io/name: {{ include "name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      {{- if $.Values.nextjsApp.nodeSelector }}
      nodeSelector:
{{ toYaml $.Values.nextjsApp.nodeSelector | indent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
           {{- if $.Values.nextjsApp.nodeLabel }}
           requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: wc-node-select-flag
                  operator: In
                  values:
                  - {{ $.Values.nextjsApp.nodeLabel }}
           {{- else }}
           requiredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityRequiredDuringScheduling" $ | indent 8 }}
           {{- end }}
           preferredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityPreferredDuringScheduling" $ | indent 8 }}
      {{- include "nextjsapp-podAntiAffinity" $ | indent 6 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ $.Values.common.serviceAccountName | default (printf "%s-commerce" $.Release.Name) }}
      {{- if $.Values.vaultconsul.enabled }}
      initContainers:
      - name: vault-dependence-check
        image: "{{ include "image.repo" $ }}{{ $.Values.supportC.image }}:{{ $.Values.supportC.tag }}"
        {{- if $.Values.common.imagePullPolicy }}
        imagePullPolicy: {{ $.Values.common.imagePullPolicy }}
        {{- end }}
        args: ['depcheck', '-component','vault','-namespace',{{ $.Release.Namespace }},'-interval_time','10','-expect_during_time','120','-timeout','5']
      {{- end }}
      volumes:
        - name: logs-sharing
          emptyDir: {}
      {{- if $.Values.common.bindingConfigMap }}
        - name: config-volume
          configMap:
            name: {{ $.Values.common.bindingConfigMap }}
      {{- end }}
      {{- if include "image.pull.secret" $ }}
      imagePullSecrets:
        - name: {{ include "image.pull.secret" $ }}
      {{- end }}
      containers:
      - name: nextjs-app
        image: "{{ include "image.repo" $ }}{{ $.Values.nextjsApp.image }}:{{ $.Values.nextjsApp.tag }}"
        {{- if $.Values.common.imagePullPolicy }}
        imagePullPolicy: {{ $.Values.common.imagePullPolicy }}
        {{- end }}
        resources:
{{ toYaml $.Values.nextjsApp.resources | indent 12 }}
        env:
        - name: "LICENSE"
          value: {{ $.Values.license | quote }}
        {{- if $.Values.common.timezone }}
        - name: "TZ"
          value: {{ $.Values.common.timezone | quote }}
        {{- end }}
        - name: "CONFIGURE_MODE"
          value: {{ $.Values.common.configureMode | quote }}
        - name: "ENVIRONMENT"
          value: {{ $.Values.common.environmentName | quote }}
        - name: "TENANT"
          value: {{ $.Values.common.tenant | quote }}
        - name: "ENVTYPE"
          value: {{ $envType | quote }}
        - name: "DOMAIN_NAME"
          value: "{{ $.Release.Namespace }}.svc.cluster.local"
        - name: "NODE_INSTANCE_NUMBER"
          value: {{ $.Values.nextjsApp.resources.limits.cpu | quote }}
        {{- if $.Values.orchestrationApp.enabled }}
        - name: "ORCHESTRATION_ENABLED"
          value: "true"
        {{- end }}
        - name: "VAULT_CA"
          value: {{ $.Values.vaultCA.enabled | quote }}
        {{- if (or (eq $.Values.common.configureMode "Vault") $.Values.vaultCA.enabled) }}
        - name: "VAULT_URL"
          value: {{ $.Values.common.vaultUrl | quote }}
        {{- if $.Values.common.vaultTokenSecret }}
        - name: "VAULT_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.common.vaultTokenSecret }}
              key: VAULT_TOKEN
        {{- end }}
        {{- end }}
{{- if get $.Values.nextjsApp.envParameters $envType }}
     {{- range $key, $value := get $.Values.nextjsApp.envParameters $envType }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
     {{- end }}
{{- end }}
        ports:
        - containerPort: 3300
          name: port3300
          protocol: TCP
        - containerPort: 3343
          name: port3343
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/healthcheck
            port: 3343
            scheme: HTTPS
            httpHeaders:
            - name: Accept
              value: text/html
          initialDelaySeconds: 240
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/healthcheck
            port: 3343
            scheme: HTTPS
            httpHeaders:
            - name: Accept
              value: text/html
        securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            privileged: false
            capabilities:
              drop:
              - all
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
        volumeMounts:
        {{- if $.Values.common.bindingConfigMap }}
          - name: config-volume
            mountPath: /SETUP/ext-config/config.properties
            subPath: config.properties
            readOnly: false
        {{- end }}
---
{{- end }}
{{- end }}
{{- end }}
