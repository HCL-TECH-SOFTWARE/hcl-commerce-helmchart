{{- $envTypeList := splitList "," (nospace .Values.common.environmentType) -}}
{{- if and (has "share" $envTypeList) (eq .Values.common.searchEngine "elastic") }}
######################################################
# Licensed Materials - Property of HCL Technologies
#  HCL Commerce
#  (C) Copyright HCL Technologies Limited 1996, 2020
######################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: HCL-Commerce
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "-" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ include "name" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{.Values.registryApp.name}}
  namespace: {{ .Release.Namespace }}
spec:
  selector: 
    matchLabels:
      chart: {{ .Chart.Name }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      component: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{.Values.registryApp.name}}
      group: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}
  replicas: {{ .Values.registryApp.replica }}
  template:
    metadata:
      annotations:
        productName: "HCL Commerce"
        productVersion: {{ .Values.common.productVersion | quote }}
      labels:
        app: HCL-Commerce
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        component: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}{{.Values.registryApp.name}}
        group: {{ .Values.common.tenant }}{{ .Values.common.environmentName}}
        app.kubernetes.io/name: {{ include "name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
    spec:
      {{- if .Values.registryApp.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.registryApp.nodeSelector | indent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
           {{- if .Values.registryApp.nodeLabel }}
           requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: wc-node-select-flag
                  operator: In
                  values: 
                  - {{ .Values.registryApp.nodeLabel }}
           {{- else }}
           requiredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityRequiredDuringScheduling" . | indent 8 }}
           {{- end }}   
           preferredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityPreferredDuringScheduling" . | indent 8 }}
      {{- include "registryapp-podAntiAffinity" . | indent 6 }}   
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ .Values.common.serviceAccountName | default (printf "%s-commerce" .Release.Name) }}
      securityContext:
        fsGroup: 1000
      {{- if $.Values.vaultconsul.enabled }}
      initContainers:
      - name: vault-dependence-check
        image: "{{ include "image.repo" $ }}{{ $.Values.supportC.image }}:{{ $.Values.supportC.tag }}"
        tty: true
        {{- if $.Values.common.imagePullPolicy }}
        imagePullPolicy: {{ $.Values.common.imagePullPolicy }}
        {{- end }}
        args: ['depcheck', '-component','vault','-namespace',{{ $.Release.Namespace }},'-interval_time','10','-expect_during_time','120','-timeout','5']
      {{- end }}
      volumes:
        - name: logs-sharing
          emptyDir: {}
        - name: cores-sharing
        {{- if .Values.registryApp.coresSharingPersistentVolumeClaim }}
          persistentVolumeClaim:
            claimName: {{ .Values.registryApp.coresSharingPersistentVolumeClaim }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      {{- if .Values.common.bindingConfigMap }}
        - name: config-volume
          configMap:
            name: {{ .Values.common.bindingConfigMap }} 
      {{- end }}
      {{- if include "image.pull.secret" . }}
      imagePullSecrets:
        - name: {{ include "image.pull.secret" . }}
      {{- end }}
      containers:
      - name: registry-app
        image: "{{ include "image.repo" . }}{{ .Values.registryApp.image }}:{{ .Values.registryApp.tag }}"
        {{- if .Values.common.imagePullPolicy }}
        imagePullPolicy: {{ .Values.common.imagePullPolicy }}
        {{- end }}
        resources:
{{ toYaml .Values.registryApp.resources | indent 12 }}
        env:
        - name: "LICENSE"
          value: {{ .Values.license | quote }}
        - name: "CONFIGURE_MODE"
          value: {{ .Values.common.configureMode | quote }}
        - name: "ENVIRONMENT"
          value: {{ .Values.common.environmentName | quote }}
        - name: "TENANT"
          value: {{ .Values.common.tenant | quote }}
        {{- if $.Values.common.timezone }}
        - name: "TZ"
          value: {{ $.Values.common.timezone | quote }}
        {{- end }}
        {{- if $.Values.logging.jsonLogging.enabled }}
        - name: "ENABLE_JSON_LOGGING"
          value: "true"
        {{- end }}
        - name: "DOMAIN_NAME"
          value: "{{ .Release.Namespace }}.svc.cluster.local"
        - name: "VAULT_CA"
          value: {{ .Values.vaultCA.enabled | quote }}
        {{- if (or (eq .Values.common.configureMode "Vault") .Values.vaultCA.enabled) }}
        - name: "VAULT_URL"
          value: {{ .Values.common.vaultUrl | quote  }}
        {{- if .Values.common.vaultTokenSecret }}
        - name: "VAULT_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.common.vaultTokenSecret }}
              key: VAULT_TOKEN
        {{- end }}
        {{- end }}
        {{- if $.Values.common.ipv6Enabled }}
        - name: "IPV6_ENABLED"
          value: "true"
        {{- end }}
{{- if .Values.registryApp.envParameters }}
     {{- range $key, $value := .Values.registryApp.envParameters }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
     {{- end }} 
{{- end }}
        ports: 
        - containerPort: 30400
          name: port30400
          protocol: TCP
        startupProbe:
          httpGet:
            path: /nifi-registry-api/config
            port: 30400
            scheme: HTTP
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 48
        readinessProbe:
          httpGet:
            path: /nifi-registry-api/config
            port: 30400
            scheme: HTTP
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
        livenessProbe:
          httpGet:
            path: /nifi-registry-api/config
            port: 30400
            scheme: HTTP
          periodSeconds: 10
          timeoutSeconds: 10
          failureThreshold: 15
        securityContext:
            {{- if $.Values.common.runAsNonRoot.enabled }}
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            {{- else }}
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 0
            {{- end }}
            readOnlyRootFilesystem: false
            privileged: false
            capabilities:
              drop:
              - all
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
        volumeMounts:
          - name: logs-sharing
            mountPath: /opt/nifi-registry/nifi-registry-0.5.0/logs
          - name: cores-sharing
            mountPath: /opt/WebSphere/Liberty/usr/servers/default/cores/container
        {{- if .Values.common.bindingConfigMap }}
          - name: config-volume
            mountPath: /SETUP/ext-config/config.properties
            subPath: config.properties
            readOnly: false      
        {{- end }}
{{- end }}