{{ if .Values.tsUtils.enabled }}
{{- $envTypeList := splitList "," (nospace .Values.common.environmentType) }}
{{- range $envType := $envTypeList }}
{{- if ne $envType "share" }}
{{- $_ := set $ "envType" $envType }}
######################################################
# Licensed Materials - Property of HCL Technologies
# HCL Commerce
# (C) Copyright HCL Technologies Limited 1996, 2021
######################################################
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: HCL-Commerce
    chart: {{ $.Chart.Name }}-{{ $.Chart.Version | replace "+" "-" }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
    app.kubernetes.io/name: {{ include "name" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.tsUtils.name}}
  namespace: {{ $.Release.Namespace }}
spec:
  selector:
    matchLabels:
      {{- if $.Values.backwardCompatibility.selector.app }}
      app: {{ $.Values.backwardCompatibility.selector.app }}
      {{- end }}
      {{- if $.Values.backwardCompatibility.selector.chart }}
      chart: {{ $.Values.backwardCompatibility.selector.chart }}
      {{- else }}
      chart: {{ $.Chart.Name }}
      {{- end }}
      release: {{ $.Release.Name }}
      heritage: {{ $.Release.Service }}
      component: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.tsUtils.name}}
      group: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}
      {{- range $key, $value := $.Values.backwardCompatibility.selector.extraSelector }}
      {{ $key }}: {{ $value | quote }}
      {{- end }}
  replicas: {{ $.Values.tsUtils.replica }}
  template:
    metadata:
      annotations:
        productName: "HCL Commerce"
        productVersion: {{ $.Values.common.productVersion | quote }}
      labels:
        {{- if $.Values.backwardCompatibility.selector.app }}
        app: {{ $.Values.backwardCompatibility.selector.app }}
        {{- else }}
        app: HCL-Commerce
        {{- end }}
        {{- if $.Values.backwardCompatibility.selector.Chart }}
        chart: {{ $.Values.backwardCompatibility.selector.Chart }}
        {{- else }}
        chart: {{ $.Chart.Name }}
        {{- end }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
        component: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}{{$.Values.tsUtils.name}}
        group: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}
        app.kubernetes.io/name: {{ include "name" $ }}
        app.kubernetes.io/instance: {{ $.Release.Name }}
        {{- range $key, $value := $.Values.backwardCompatibility.selector.extraSelector }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- if $.Values.tsUtils.nodeSelector }}
      nodeSelector:
{{ toYaml $.Values.tsUtils.nodeSelector | indent 8 }}
      {{- end }}
      affinity:
        nodeAffinity:
           {{- if $.Values.tsUtils.nodeLabel }}
           requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: wc-node-select-flag
                  operator: In
                  values:
                  - {{ $.Values.tsUtils.nodeLabel }}
           {{- else }}
           requiredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityRequiredDuringScheduling" $ | indent 8 }}
           {{- end }}
           preferredDuringSchedulingIgnoredDuringExecution:
           {{- include "nodeAffinityPreferredDuringScheduling" $ | indent 8 }}
      {{- include "tsutils-podAntiAffinity" $ | indent 6 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ $.Values.common.serviceAccountName | default (printf "%s-commerce" $.Release.Name) }}
      {{- if $.Values.tsUtils.initContainer.enabled }}
      initContainers:
      - name: ts-utils-data-setup
        image: "{{ include "image.repo" $ }}{{ $.Values.tsUtils.initContainer.image }}:{{ $.Values.tsUtils.initContainer.tag }}"
        {{- if $.Values.common.imagePullPolicy }}
        imagePullPolicy: {{ $.Values.common.imagePullPolicy }}
        {{- end }}
        command: {{ $.Values.tsUtils.initContainer.command }}
        args: {{ $.Values.tsUtils.initContainer.command }}
        volumeMounts:
          - name:  {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}-tsutils-volume
            mountPath: /data
      {{- end }}
      volumes:
        - name: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}-tsutils-volume
          emptyDir: {}
        - name: logs-sharing
          emptyDir: {}
        - name: cores-sharing
        {{- if get $.Values.tsUtils.coresSharingPersistentVolumeClaim $envType}}
          persistentVolumeClaim:
            claimName: {{ get $.Values.tsUtils.coresSharingPersistentVolumeClaim $envType }}
        {{- else }}
          emptyDir: {}
        {{- end }}
      {{- if and ($.Values.assetsPVC.enabled) (eq $envType "auth") }}
        - name: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}auth-assets-volume
          persistentVolumeClaim:
            {{- if get $.Values.assetsPVC.existingClaim "auth" }}
            claimName: {{ get $.Values.assetsPVC.existingClaim "auth" }}
            {{- else }}
            claimName: commerce-{{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}auth-assets-pvc
            {{- end }}
        - name: {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}live-assets-volume
          persistentVolumeClaim:
            {{- if get $.Values.assetsPVC.existingClaim "live" }}
            claimName: {{ get $.Values.assetsPVC.existingClaim "live" }}
            {{- else }}
            claimName: commerce-{{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}live-assets-pvc
            {{- end }}
      {{- end }}
      {{- if and (eq $envType "auth") $.Values.tsApp.ldap.auth.enabled $.Values.tsApp.ldap.auth.useConfigMapForVmmPropertiesFile }}
        - name: commerce-ldap-config-auth
          configMap:
            name: commerce-{{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}auth-ldap-config
            items:
            - key: ldap-vmm.properties
              path: ldap-vmm.properties
      {{- end }}
      {{- if and (eq $envType "live") $.Values.tsApp.ldap.live.enabled $.Values.tsApp.ldap.live.useConfigMapForVmmPropertiesFile }}
        - name: commerce-ldap-config-live
          configMap:
            name: commerce-{{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}live-ldap-config
            items:
            - key: ldap-vmm.properties
              path: ldap-vmm.properties
      {{- end }}
      {{- if $.Values.common.bindingConfigMap }}
        - name: config-volume
          configMap:
            name: {{ $.Values.common.bindingConfigMap }}
      {{- end }}
      {{- if include "image.pull.secret" $ }}
      imagePullSecrets:
        - name: {{ include "image.pull.secret" $ }}
      {{- end }}
      containers:
      - name: ts-utils
        image: "{{ include "image.repo" $ }}{{ $.Values.tsUtils.image }}:{{ $.Values.tsUtils.tag }}"
        {{- if $.Values.common.imagePullPolicy }}
        imagePullPolicy: {{ $.Values.common.imagePullPolicy }}
        {{- end }}
        resources:
{{ toYaml $.Values.tsUtils.resources | indent 12 }}
        env:
        - name: "LICENSE"
          value: {{ $.Values.license | quote }}
        {{- if $.Values.common.timezone }}
        - name: "TZ"
          value: {{ $.Values.common.timezone | quote }}
        {{- end }}
        - name: "CONFIGURE_MODE"
          value: {{ $.Values.common.configureMode | quote }}
        - name: "ENVIRONMENT"
          value: {{ $.Values.common.environmentName | quote }}
        - name: "TENANT"
          value: {{$.Values.common.tenant | quote }}
        - name: "ENVTYPE"
          value: {{ $envType | quote }}
        - name: "DBTYPE"
          value: {{ $.Values.common.dbType | quote }}
        - name: "DOMAIN_NAME"
          value: "{{ $.Release.Namespace }}.svc.cluster.local"
        - name: "SPIUSER_PWD"
          value: {{ $.Values.common.spiUserPwdAes | quote}}
        - name: "SPIUSER_NAME"
          value: {{ $.Values.common.spiUserName | quote}}
        {{- if eq $.Values.common.searchEngine "elastic" }}
        - name: "ELASTICSEARCH_ENABLED"
          value: "true"
        {{- end }}
        - name: "VAULT_CA"
          value: {{ $.Values.vaultCA.enabled | quote }}
        {{- if $.Values.tsApp.merchantKey }}
        - name: "MERCHANTKEY_ENCRYPT"
          value: {{ $.Values.tsApp.merchantKey | quote }}
        {{- end }}
        {{- if (or (eq $.Values.common.configureMode "Vault") $.Values.vaultCA.enabled) }}
        - name: "VAULT_URL"
          value: {{ $.Values.common.vaultUrl | quote }}
        {{- if $.Values.common.vaultTokenSecret }}
        - name: "VAULT_TOKEN"
          valueFrom:
            secretKeyRef:
              name: {{ $.Values.common.vaultTokenSecret }}
              key: VAULT_TOKEN
        {{- end }}
        {{- end }}
        {{ if and (eq $envType "auth") $.Values.tsApp.ldap.auth.enabled }}
        - name: "LDAP_ENABLE"
          value: "true"
        {{ if or $.Values.tsApp.ldap.auth.useVmmPropertiesFile $.Values.tsApp.ldap.auth.useConfigMapForVmmPropertiesFile }}
        - name: "LDAP_USE_VMM_PROPERTIES_FILE"
          value: "true"
        {{- end }}
        {{- end }}
        {{ if and (eq $envType "live") $.Values.tsApp.ldap.live.enabled }}
        - name: "LDAP_ENABLE"
          value: "true"
        {{ if or $.Values.tsApp.ldap.live.useVmmPropertiesFile $.Values.tsApp.ldap.live.useConfigMapForVmmPropertiesFile }}
        - name: "LDAP_USE_VMM_PROPERTIES_FILE"
          value: "true"
        {{- end }}
        {{- end }}
{{- if get $.Values.tsUtils.envParameters $envType }}
     {{- range $key, $value := get $.Values.tsUtils.envParameters $envType }}
        - name: {{ $key | quote }}
          value: {{ $value | quote }}
     {{- end }}
{{- end }}
        readinessProbe:
          exec:
            command:
            - test
            - -f
            - /SETUP/.ready
          periodSeconds: 30
        securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            capabilities:
              drop:
              - all
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - MKNOD
              - AUDIT_WRITE
              - SETFCAP
        volumeMounts:
          - name: logs-sharing
            mountPath: /opt/WebSphere/AppServer/profiles/default/logs/container
          - name: cores-sharing
            mountPath: /opt/WebSphere/AppServer/profiles/default/cores/container
          - name:  {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}{{ $envType }}-tsutils-volume
            mountPath: /data
        {{- if and ($.Values.assetsPVC.enabled) (eq $envType "auth") }}
          - name:  {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}auth-assets-volume
            mountPath: /SETUP/assets/auth
          - name:  {{ $.Values.common.tenant }}{{ $.Values.common.environmentName}}live-assets-volume
            mountPath: /SETUP/assets/live
        {{- end }}
        {{- if $.Values.common.bindingConfigMap }}
          - name: config-volume
            mountPath: /SETUP/ext-config/config.properties
            subPath: config.properties
            readOnly: false
        {{- end }}
        {{- if and (eq $envType "auth") $.Values.tsApp.ldap.auth.enabled $.Values.tsApp.ldap.auth.useConfigMapForVmmPropertiesFile }}
          - name: commerce-ldap-config-auth
            mountPath: /SETUP/ldap/properties/vmm.properties
            subPath: ldap-vmm.properties
        {{- end }}
        {{- if and (eq $envType "live") $.Values.tsApp.ldap.live.enabled $.Values.tsApp.ldap.auth.useConfigMapForVmmPropertiesFile }}
          - name: commerce-ldap-config-live
            mountPath: /SETUP/ldap/properties/vmm.properties
            subPath: ldap-vmm.properties
        {{- end }}
---
{{- end }}
{{- end }}
{{- end }}
